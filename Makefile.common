# name of executable

OUTPUT_FILENAME=$(notdir $(CURDIR))
ELF=$(OUTPUT_FILENAME).elf                    
BIN=$(OUTPUT_FILENAME).bin                   
HEX=$(OUTPUT_FILENAME).hex 
OUT=$(OUTPUT_FILENAME).out                  

GNU_INSTALL_ROOT?=/usr/local
GNU_PREFIX?=arm-none-eabi

SDK_PATH?=$(HOME)/Work/Internal/nordic-master/nordic-sdk
TEMPLATE_PATH?=$(SDK_PATH)/components/toolchain/gcc
OPENOCDPATH?=/usr/local
S130_HEX_FILE?=$(SDK_PATH)/components/softdevice/s130/hex/s130_nrf51_2.0.1_softdevice.hex

MK := mkdir
RM := rm -rf

#echo suspend
ifeq ("$(VERBOSE)","1")
NO_ECHO := 
else
NO_ECHO := @
endif

# Toolchain commands
CC              := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-gcc'
CPP             := "$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-c++"
AS              := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-as'
AR              := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ar' -r
LD              := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-ld'
NM              := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-nm'
OBJDUMP         := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objdump'
OBJCOPY         := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-objcopy'
SIZE            := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-size'
GDB             := '$(GNU_INSTALL_ROOT)/bin/$(GNU_PREFIX)-gdb'
OPENOCD         := '$(OPENOCDPATH)/bin/openocd'

OBJECT_DIRECTORY = build
OUTPUT_BINARY_DIRECTORY = $(OBJECT_DIRECTORY)

# Sorting removes duplicates
BUILD_DIRECTORIES := $(sort $(OBJECT_DIRECTORY))

#assembly files common to all targets
OBJS += gcc_startup_nrf51.o

OBJECTS = $(addprefix $(OBJECT_DIRECTORY)/, $(OBJS) )

#includes common to all targets
INC_PATHS += -I.
INC_PATHS += -I$(TEMPLATEROOT)
INC_PATHS += -I$(SDK_PATH)/components/ble/ble_advertising
INC_PATHS += -I$(SDK_PATH)/components/ble/ble_db_discovery
INC_PATHS += -I$(SDK_PATH)/components/ble/nrf_ble_gatt
INC_PATHS += -I$(SDK_PATH)/components/ble/common
INC_PATHS += -I$(SDK_PATH)/components/ble/device_manager
INC_PATHS += -I$(SDK_PATH)/components/boards
INC_PATHS += -I$(SDK_PATH)/components/device
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/ble_flash
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/clock
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/common
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/config
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/delay
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/gpiote
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/hal
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/pstorage
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/rng
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/timer
INC_PATHS += -I$(SDK_PATH)/components/drivers_nrf/uart
INC_PATHS += -I$(SDK_PATH)/components/libraries/button
INC_PATHS += -I$(SDK_PATH)/components/libraries/crc16
INC_PATHS += -I$(SDK_PATH)/components/libraries/crypto
INC_PATHS += -I$(SDK_PATH)/components/libraries/ecc
INC_PATHS += -I$(SDK_PATH)/components/libraries/fifo
INC_PATHS += -I$(SDK_PATH)/components/libraries/fstorage
INC_PATHS += -I$(SDK_PATH)/components/libraries/hardfault
INC_PATHS += -I$(SDK_PATH)/components/libraries/hci
INC_PATHS += -I$(SDK_PATH)/components/libraries/log
INC_PATHS += -I$(SDK_PATH)/components/libraries/log/src
INC_PATHS += -I$(SDK_PATH)/components/libraries/queue
INC_PATHS += -I$(SDK_PATH)/components/libraries/sha256
INC_PATHS += -I$(SDK_PATH)/components/libraries/timer
INC_PATHS += -I$(SDK_PATH)/components/libraries/trace
INC_PATHS += -I$(SDK_PATH)/components/libraries/uart
INC_PATHS += -I$(SDK_PATH)/components/libraries/util
INC_PATHS += -I$(SDK_PATH)/components/softdevice/common/softdevice_handler
INC_PATHS += -I$(SDK_PATH)/components/toolchain
INC_PATHS += -I$(SDK_PATH)/components/toolchain/cmsis/include
INC_PATHS += -I$(SDK_PATH)/components/toolchain/CMSIS/Include
INC_PATHS += -I$(SDK_PATH)/components/toolchain/gcc

#flags common to all targets
CFLAGS += -DNRF51
CFLAGS += -mcpu=cortex-m0
CFLAGS+= $(INC_PATHS)
CFLAGS += -mthumb -mabi=aapcs
CFLAGS += -Wall -Werror -Werror=vla
CFLAGS += -mfloat-abi=soft
# keep every function in separate section. This will allow linker to dump unused functions
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fno-builtin --short-enums


# keep every function in separate section. This will allow linker to dump unused functions
LDFLAGS += -Xlinker -Map=$(OBJECT_DIRECTORY)/$(OUTPUT_FILENAME).map
LDFLAGS += -mthumb -mabi=aapcs -L$(TEMPLATE_PATH) -T$(LDSCRIPT)
LDFLAGS += -mcpu=cortex-m0
# let linker to dump unused sections
LDFLAGS += -Wl,--gc-sections
# use newlib in nano version
LDFLAGS += --specs=nano.specs -lc -lnosys

# Assembler flags
ASMFLAGS += -x assembler-with-cpp
ASMFLAGS += -DNRF51
#ASMFLAGS += -D__STACK_SIZE=2048
#ASMFLAGS += -D__HEAP_SIZE=512

#default target - first one defined
#default: clean $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
default: $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)

#building all targets
#all: clean $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
all: $(OUTPUT_BINARY_DIRECTORY)/$(BIN) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)

bin: $(OUTPUT_BINARY_DIRECTORY)/$(BIN)

#target for printing all targets
help:
	@echo following targets are available:
	@echo 	$(OUTPUT_FILENAME)

#includes common to all targets

vpath %.c $(TEMPLATEROOT)
vpath %.s $(TEMPLATEROOT)
vpath %.S $(TEMPLATEROOT)
vpath %.c $(SDK_PATH)/components/ble/ble_advertising
vpath %.c $(SDK_PATH)/components/ble/ble_db_discovery
vpath %.c $(SDK_PATH)/components/ble/nrf_ble_gatt
vpath %.c $(SDK_PATH)/components/ble/common
vpath %.c $(SDK_PATH)/components/boards
vpath %.c $(SDK_PATH)/components/device
vpath %.c $(SDK_PATH)/components/drivers_nrf/ble_flash
vpath %.c $(SDK_PATH)/components/drivers_nrf/clock
vpath %.c $(SDK_PATH)/components/drivers_nrf/common
vpath %.c $(SDK_PATH)/components/drivers_nrf/config
vpath %.c $(SDK_PATH)/components/drivers_nrf/delay
vpath %.c $(SDK_PATH)/components/drivers_nrf/gpiote
vpath %.c $(SDK_PATH)/components/drivers_nrf/hal
vpath %.c $(SDK_PATH)/components/drivers_nrf/nrf_soc_nosd
vpath %.c $(SDK_PATH)/components/drivers_nrf/pstorage
vpath %.c $(SDK_PATH)/components/drivers_nrf/rng
vpath %.c $(SDK_PATH)/components/drivers_nrf/timer
vpath %.c $(SDK_PATH)/components/drivers_nrf/uart
vpath %.c $(SDK_PATH)/components/libraries/button
vpath %.c $(SDK_PATH)/components/libraries/crc16
vpath %.c $(SDK_PATH)/components/libraries/crypto
vpath %.c $(SDK_PATH)/components/libraries/ecc
vpath %.c $(SDK_PATH)/components/libraries/fifo
vpath %.c $(SDK_PATH)/components/libraries/fstorage
vpath %.c $(SDK_PATH)/components/libraries/hardfault
vpath %.c $(SDK_PATH)/components/libraries/hci
vpath %.c $(SDK_PATH)/components/libraries/log
vpath %.c $(SDK_PATH)/components/libraries/log/src
vpath %.c $(SDK_PATH)/components/libraries/queue
vpath %.c $(SDK_PATH)/components/libraries/sha256
vpath %.c $(SDK_PATH)/components/libraries/timer
vpath %.c $(SDK_PATH)/components/libraries/trace
vpath %.c $(SDK_PATH)/components/libraries/uart
vpath %.c $(SDK_PATH)/components/libraries/util
vpath %.c $(SDK_PATH)/components/softdevice/common/softdevice_handler
vpath %.c $(SDK_PATH)/components/toolchain
vpath %.c $(SDK_PATH)/components/toolchain/gcc
vpath %.s $(SDK_PATH)/components/toolchain/gcc
vpath %.S $(SDK_PATH)/components/toolchain/gcc
vpath %.c ./external

## Create build directories
$(BUILD_DIRECTORIES):
	$(MK) $@

# Build executable 

$(OUTPUT_BINARY_DIRECTORY)/$(BIN) : $(OUTPUT_BINARY_DIRECTORY)/$(OUT)
	$(OBJCOPY) -O binary $(OUTPUT_BINARY_DIRECTORY)/$(OUT) $(OUTPUT_BINARY_DIRECTORY)/$(BIN)

$(OUTPUT_BINARY_DIRECTORY)/$(HEX) : $(OUTPUT_BINARY_DIRECTORY)/$(OUT)
	$(OBJCOPY) -O ihex $(OUTPUT_BINARY_DIRECTORY)/$(OUT) $(OUTPUT_BINARY_DIRECTORY)/$(HEX)

$(OUTPUT_BINARY_DIRECTORY)/$(OUT) : $(BUILD_DIRECTORIES) $(OBJECTS)
	$(CC) $(LDFLAGS) -o $@ $(OBJECTS) $(LDLIBS)

# compile and generate dependency info

$(OBJECT_DIRECTORY)/%.o: %.c
	$(CC) -c $(CFLAGS) --std=gnu99 $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.s
	$(CC) -c $(ASMFLAGS) -c $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.S
	$(CC) -c $(ASMFLAGS) -c $< -o $@

$(OBJECT_DIRECTORY)/%.o: %.cpp
	$(CPP) -c $(CFLAGS) $< -o $@

flash: $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

flash_erase: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; reset; exit'

flash_run: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset run; exit'

reset_run: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; reset run; exit'

flash_reset: 
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; reset; exit'

flash_s110: $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; program $(S110_HEX_FILE) verify; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

flash_s130: $(OUTPUT_BINARY_DIRECTORY)/$(HEX)
	$(OPENOCD) -d2 -f $(TEMPLATEROOT)/openocd.cfg -c 'init_reset halt; init; halt; nrf51 mass_erase; program $(S130_HEX_FILE) verify; program $(OUTPUT_BINARY_DIRECTORY)/$(HEX) verify; reset; exit'

clean:
	$(RM) $(BUILD_DIRECTORIES)

cleanobj:
	$(RM) $(BUILD_DIRECTORIES)/*.o

